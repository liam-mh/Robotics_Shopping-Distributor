{"mode":"Text","hardwareTarget":"brain","textContent":"# -------------------------------------------------------------------\n# \tProject:      Robotics Task 2: Shopping Distributor\n#\tAuthor:       Liam Hammond C1022456 \n#                 Guy Nicklin C1009267\n#\tCreated:      01/04/2025\n# -------------------------------------------------------------------\n\n# Imports\n# -------------------------------------------------------------------\nfrom vex import *\n\n# Robot Configuration\n# -------------------------------------------------------------------\nbrain          = Brain()\nbrain_inertial = Inertial()\npaddle_2       = Motor(Ports.PORT1)\npaddle_1       = Motor(Ports.PORT2) \nbelt           = Motor(Ports.PORT3, True)\nai_vision      = AiVision(Ports.PORT4, AiVision.ALL_TAGS)\npusher         = Motor(Ports.PORT5)\npusher.set_velocity(30, PERCENT)\nwait(100, MSEC) # ensure init\n\n# Constants\n# -------------------------------------------------------------------\nitems = [\n    {\"id\": 1, \"name\": \"Milk\",           \"price\": 1.99, \"temp\": \"fridge\"},\n    {\"id\": 5, \"name\": \"Cheese\",         \"price\": 3.59, \"temp\": \"fridge\"},\n    {\"id\": 4, \"name\": \"Chicken Breast\", \"price\": 6.49, \"temp\": \"fridge\"},\n\n    {\"id\": 9, \"name\": \"Frozen Peas\",    \"price\": 1.89, \"temp\": \"frozen\"},\n    {\"id\": 2, \"name\": \"Frozen Pizza\",   \"price\": 1.99, \"temp\": \"frozen\"},\n    {\"id\": 6, \"name\": \"Ice Cream\",      \"price\": 4.49, \"temp\": \"frozen\"},\n\n    {\"id\": 7, \"name\": \"Eggs\",           \"price\": 2.99, \"temp\": \"dry\"},\n    {\"id\": 8, \"name\": \"Beans\",          \"price\": 0.39, \"temp\": \"dry\"},\n    {\"id\": 3, \"name\": \"Rice\",           \"price\": 1.99, \"temp\": \"dry\"},\n\n    {\"id\": 29, \"name\": \"Checkout\"},\n]\n\nshop = []\n\n# Motor Functions\n# -------------------------------------------------------------------\ndef use_paddle(inputMotor, length) :\n    # Controls a motor to simulate a paddle movement.\n    # Args:\n    #     inputMotor: The motor object to control.\n    #     length: The duration in milliseconds to hold the paddle at the extended position.\n    motor = inputMotor\n    motor.set_position(0, DEGREES)\n    motor.spin_to_position(70, DEGREES)\n    wait(length, MSEC)  \n    motor.spin_to_position(0, DEGREES)\n    wait(2000, MSEC)  \n    motor.stop()\n\ndef drive_belt() :\n    # Controls a motor to turn the drive belt.\n    belt.set_velocity(30, PERCENT)\n    while True:\n        belt.spin(FORWARD)\n        wait(100, MSEC)\n\ndef push_item() :\n    # Controls a motor to move an item from the initial platform onto the drive belt.\n    motor = pusher\n    motor.set_position(0, DEGREES)\n    motor.spin_to_position(-160, DEGREES)\n    wait(1000, MSEC)  \n    motor.spin_to_position(0, DEGREES)\n    wait(2000, MSEC)  \n    motor.stop()\n\n# Helper Functions\n# -------------------------------------------------------------------\ndef ai_cam() :\n    # Uses the ai camera to detect labels.\n    # Returns:\n    #     int | None.\n    ai_objects = ai_vision.take_snapshot(AiVision.ALL_TAGS)\n    length = str(len(ai_objects))\n    if len(ai_objects) > 0:\n        tag = ai_objects[0].id\n        if tag is not None:\n            return tag\n    return None\n\ndef get_item_from_id(scan_id) :\n    # Checks the items array for matching item.\n    # Args:\n    #     scan_id: int\n    # Returns:\n    #     item{} | None.\n    for item in items:\n        if scan_id == item[\"id\"]: \n            return item \n    return None\n\n# Printer Functions\n# -------------------------------------------------------------------\ndef print_item(item) :\n    # Prints the item content to the screen.\n    # Args:\n    #    item: item{}\n    brain.screen.clear_screen()  \n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(item[\"id\"])\n    brain.screen.next_row()\n    brain.screen.print(item[\"name\"])\n    brain.screen.next_row()\n    brain.screen.print(item[\"price\"])\n    brain.screen.next_row()\n    brain.screen.print(item[\"temp\"])\n    brain.screen.next_row()\n\ndef print_shop() :\n    # Prints total price of the shop array.\n    total = 0\n    for item in shop :\n        total = total + item[\"price\"]\n    brain.screen.clear_screen()  \n    brain.screen.set_cursor(1, 1)\n    brain.screen.print('total: ', total)\n\n\n# Main Run File\n# -------------------------------------------------------------------\n# Start the drive belt on thread\nbelt_thread = Thread(drive_belt) \nwhile True:\n\n    # Scan present barcodes\n    scan_id = None\n    scan_id = ai_cam()\n\n    # Checkout edge case\n    if scan_id is 29 : \n        brain.play_sound(SoundType.TADA)\n        belt.set_velocity(0, PERCENT) \n        print_shop()\n        wait(5000, MSEC) \n        break\n\n    # Present item edge case\n    elif scan_id is not None:\n\n        brain.play_note(1, 4, 200, 50)\n        matched_item = get_item_from_id(scan_id)\n        \n        # Valid item edge case\n        if matched_item :\n            \n            print_item(matched_item)\n            shop.append(matched_item)\n            wait(1000, MSEC) \n\n            # Move valid item onto the conveyor belt\n            pusher_thread = Thread(push_item)\n\n            # Sort item dependent on temperature edge case\n            # Direct item to fridge\n            if matched_item[\"temp\"] == \"fridge\" :\n                paddle_thread = Thread(use_paddle(paddle_2, 3000))\n                paddle_thread.stop()\n\n            # Direct item to freezer\n            elif matched_item[\"temp\"] == \"frozen\" :\n                paddle_thread = Thread(use_paddle(paddle_1, 1800))\n                paddle_thread.stop()\n\n            # Direct item to dry store\n            else :\n                wait(3000, MSEC)\n\n            pusher_thread.stop()\n        \n        # Error handle invalid barcode\n        else :\n            brain.screen.clear_screen()  \n            brain.screen.set_cursor(1, 1)\n            brain.screen.print('Unrecognised item')\n            brain.screen.next_row()\n            brain.screen.print('please remove')\n            brain.play_sound(SoundType.POWER_DOWN)\n            wait(2000, MSEC)","textLanguage":"python","robotConfig":[],"slot":0,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}